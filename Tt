graph TD
    A[Начало] --> B{Определить тип операции}
    B -->|Создание| C1[Проверка имени услуги]
    B -->|Изменение| C2[Проверка существования услуги]
    B -->|Удаление| C3[Проверка использования услуги]
    
    %% Создание услуги
    C1 --> D1{Уникальность имени}
    D1 -->|Нет конфликтов| E1[Создать запись услуги]
    D1 -->|Конфликт| F1{Есть удаленные дубли?}
    F1 -->|Да| G1[Разрешить создание]
    F1 -->|Нет| H1[Ошибка: имя занято]
    
    %% Изменение услуги
    C2 --> D2{Услуга активна?}
    D2 -->|Да| E2[Проверить новое имя]
    D2 -->|Нет| F2[Ошибка: нельзя изменять удаленную]
    E2 --> G2{Новое имя уникально?}
    G2 -->|Да| H2[Обновить данные]
    G2 -->|Нет| I2[Ошибка: имя занято]
    
    %% Удаление услуги
    C3 --> D3{Услуга используется?}
    D3 -->|Нет| E3[Пометить как удаленную]
    D3 -->|Да| F3{Реестр дневной?}
    F3 -->|Да| G3[Удалить после даты реестра]
    F3 -->|Нет| H3[Удалить с конца месяца]
    
    %% Общие процессы
    E1 --> Z[Запись в журнал]
    H2 --> Z
    E3 --> Z
    G3 --> Z
    H3 --> Z
    H1 --> Z[Запись ошибки]
    F2 --> Z
    I2 --> Z

graph TD
    A[Начало] --> B{Определить тип операции}
    B -->|Создание| C1[Проверка имени]
    B -->|Изменение| C2[Проверка существования]
    B -->|Удаление| C3[Проверка использования]
    
    %% Блок изменения (добавлена часть с ценой)
    C2 --> D2{Услуга активна?}
    D2 -->|Да| E2[Проверить изменения]
    E2 --> F2{Изменено имя?}
    F2 -->|Да| G2[Проверить уникальность]
    F2 -->|Нет| H2{Изменена цена?}
    
    H2 -->|Да| I2[Создать новую запись цены]
    H2 -->|Нет| J2[Продолжить]
    
    I2 --> K2[Проверить период действия]
    K2 -->|Valid| L2[Обновить end_date старой цены]
    K2 -->|Invalid| M2[Ошибка: пересечение периодов]
    
    L2 --> N2[Вставить новую цену]
    N2 --> O2[Обновить данные услуги]
CREATE OR REPLACE FUNCTION cub.manage_registry_company_rows(
    p_action varchar,        -- 'INSERT', 'UPDATE' или 'DELETE'
    p_reg_id bigint,         -- ID реестра
    p_com_id bigint,         -- ID предприятия
    p_div_name varchar DEFAULT NULL, -- Название подразделения (NULL для головного предприятия)
    p_contract_id bigint DEFAULT NULL,
    p_service_date date DEFAULT NULL,
    p_service_quantity numeric(18,7) DEFAULT NULL
)
RETURNS jsonb
LANGUAGE plpgsql
AS $$
DECLARE
    _result jsonb;
    _rows_affected integer;
    _new_row_id bigint;
    _reg_type_id bigint;
BEGIN
    -- Проверка существования реестра и получение его типа
    SELECT xq01regt_id INTO _reg_type_id 
    FROM cub.xq01_registry 
    WHERE xq01reg_id = p_reg_id;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'message', 'Реестр не найден');
    END IF;

    -- Проверка предприятия (кроме удаления)
    IF p_action != 'DELETE' AND NOT EXISTS (SELECT 1 FROM sc_str.company WHERE com_id = p_com_id) THEN
        RETURN jsonb_build_object('success', false, 'message', 'Предприятие не найдено');
    END IF;

    CASE p_action
        WHEN 'INSERT' THEN
            -- Вставка строк для всех услуг реестра данного типа
            INSERT INTO cub.xq01_registry_row (
                xq01reg_id, 
                xq01regs_id, 
                com_id, 
                contract_id,
                xq01regr_div_name,
                xq01regr_service_date,
                xq01regr_service_quantity
            )
            SELECT 
                p_reg_id,
                s.xq01regs_id,
                p_com_id,
                p_contract_id,
                p_div_name,
                p_service_date,
                p_service_quantity
            FROM cub.xq01_ref_registry_service s
            WHERE s.xq01regt_id = _reg_type_id
            RETURNING xq01regr_id INTO _new_row_id;
            
            GET DIAGNOSTICS _rows_affected = ROW_COUNT;
            
            RETURN jsonb_build_object(
                'success', true,
                'rows_affected', _rows_affected,
                'new_ids', (SELECT jsonb_agg(xq01regr_id) FROM cub.xq01_registry_row 
                            WHERE xq01reg_id = p_reg_id AND com_id = p_com_id AND 
                                 (xq01regr_div_name = p_div_name OR (xq01regr_div_name IS NULL AND p_div_name IS NULL))
            );

        WHEN 'UPDATE' THEN
            -- Обновление всех строк предприятия в реестре
            UPDATE cub.xq01_registry_row
            SET 
                contract_id = COALESCE(p_contract_id, contract_id),
                xq01regr_service_date = COALESCE(p_service_date, xq01regr_service_date),
                xq01regr_service_quantity = COALESCE(p_service_quantity, xq01regr_service_quantity)
            WHERE xq01reg_id = p_reg_id
              AND com_id = p_com_id
              AND (xq01regr_div_name = p_div_name OR (xq01regr_div_name IS NULL AND p_div_name IS NULL));
              
            GET DIAGNOSTICS _rows_affected = ROW_COUNT;
            
            RETURN jsonb_build_object(
                'success', true,
                'rows_affected', _rows_affected
            );

        WHEN 'DELETE' THEN
            -- Удаление всех строк предприятия в реестре
            DELETE FROM cub.xq01_registry_row
            WHERE xq01reg_id = p_reg_id
              AND com_id = p_com_id
              AND (xq01regr_div_name = p_div_name OR (xq01regr_div_name IS NULL AND p_div_name IS NULL))
            RETURNING xq01regr_id INTO _new_row_id;
            
            IF _new_row_id IS NULL THEN
                RETURN jsonb_build_object('success', false, 'message', 'Строки не найдены');
            END IF;
            
            GET DIAGNOSTICS _rows_affected = ROW_COUNT;
            
            RETURN jsonb_build_object(
                'success', true,
                'rows_affected', _rows_affected
            );

        ELSE
            RETURN jsonb_build_object('success', false, 'message', 'Неизвестное действие');
    END CASE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', SQLERRM,
            'sqlstate', SQLSTATE
        );
END;
$$;
